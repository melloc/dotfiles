if has("autocmd")
    filetype off
endif

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif


"dein Scripts-----------------------------
if &compatible
  set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=/home/cpm/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('/home/cpm/.cache/dein')
  call dein#begin('/home/cpm/.cache/dein')

  " Let dein manage dein
  " Required:
  call dein#add('/home/cpm/.cache/dein/repos/github.com/Shougo/dein.vim')

  " Add or remove your plugins here:
  " call dein#add('Shougo/neosnippet.vim')
  " call dein#add('Shougo/neosnippet-snippets')

  " You can specify revision/branch/tag.
  " call dein#add('Shougo/deol.nvim', { 'rev': '01203d4c9' })

  call dein#add('kana/vim-operator-user')
  call dein#add('edkolev/erlang-motions.vim')
  call dein#add('jimenezrick/vimerl')
  call dein#add('sjl/gundo.vim')
  call dein#add('derekwyatt/vim-scala')
  call dein#add('majutsushi/tagbar')
  "call dein#add('fatih/vim-go')
  call dein#add('scrooloose/syntastic')
  call dein#add('the-lambda-church/merlin')
  "call dein#add('amdt/vim-niji')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
" if dein#check_install()
"   call dein#install()
" endif

"End dein Scripts-------------------------

set ruler

syntax on

set expandtab
set tabstop=4
set shiftwidth=4

set backspace=indent,eol

autocmd BufNewFile,BufRead *.c,*.h set noet

set ofu=syntaxcomplete#Complete

" Set my mappings. Especially the capital W.
inoremap jj <Esc>
command W w
command Wq wq
command Sh sh

if exists("&foldenable")
    set foldenable
endif

" colorscheme zenburn
" colorscheme desert

let g:haddock_browser="/usr/bin/chromium"
let g:haddock_browser_callformat="%s file://%s >/dev/null 2>&1 &"

" show tabs as double angle brackets
set list
set listchars=tab:»\ 

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

nmap <F8> :TagbarToggle<CR>

" Enable syntastic checks; uncomment when desired
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0
" let g:syntastic_javascript_checkers=['eslint']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" CSCOPE settings for vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" This file contains some boilerplate settings for vim's cscope interface,
"" plus some keyboard mappings that I've found useful.
""
"" USAGE:
"" -- vim 6:     Stick this file in your ~/.vim/plugin directory (or in a
""               'plugin' directory in some other directory that is in your
""               'runtimepath'.
""
"" -- vim 5:     Stick this file somewhere and 'source cscope.vim' it from
""               your ~/.vimrc file (or cut and paste it into your .vimrc).
""
"" NOTE:
"" These key maps use multiple keystrokes (2 or 3 keys).  If you find that
"" vim
"" keeps timing you out before you can complete them, try changing your
"" timeout
"" settings, as explained below.
""
"" Happy cscoping,
""
"" Jason Duell       jduell@alumni.princeton.edu     2002/3/7
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"" This tests to see if vim was configured with the '--enable-cscope' option
"" " when it was compiled.  If it wasn't, time to recompile vim...
if has("cscope")
set cscopeprg=/home/cody/ws/smartos-live/projects/illumos/usr/src/tools/proto/root_i386-nd/opt/onbld/bin/i386/cscope-fast
"
"""""""""""""" Standard cscope/vim boilerplate
"
"" use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
set cscopetag
"
"" check cscope for definition of a symbol before checking ctags: set to 1
""          " if you want the reverse search order.
set csto=0

" If we're in a workspace, we usually want to be editing from the source root so
" that cscope paths are correct.
"if $SRC != ""
"    cd $SRC
"endif

if filereadable("cscope.out")
    cs add cscope.out
elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
endif

set cscopeverbose

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

endif
