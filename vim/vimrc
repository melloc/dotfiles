if has("autocmd")
    filetype off
endif

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  set nocompatible               " Be iMproved
  set rtp+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My bundles
NeoBundle 'kana/vim-operator-user'
NeoBundle 'edkolev/erlang-motions.vim'
NeoBundle 'jimenezrick/vimerl'
NeoBundle 'sjl/gundo.vim'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'fatih/vim-go'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'the-lambda-church/merlin'
NeoBundle 'amdt/vim-niji'

call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

syntax on

set expandtab
set tabstop=4
set shiftwidth=4

set ofu=syntaxcomplete#Complete

" Set my mappings. Especially the capital W.
inoremap jj <Esc>
command W w
command Wq wq

if exists("&foldenable")
    set foldenable
endif

" colorscheme zenburn
" colorscheme desert

let g:haddock_browser="/usr/bin/chromium"
let g:haddock_browser_callformat="%s file://%s >/dev/null 2>&1 &"

" show tabs as double angle brackets
set list
set listchars=tab:»\ 

set grepprg=grep\ -nH\ $*
let g:tex_flavor='latex'

nmap <F8> :TagbarToggle<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" CSCOPE settings for vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""
"" This file contains some boilerplate settings for vim's cscope interface,
"" plus some keyboard mappings that I've found useful.
""
"" USAGE:
"" -- vim 6:     Stick this file in your ~/.vim/plugin directory (or in a
""               'plugin' directory in some other directory that is in your
""               'runtimepath'.
""
"" -- vim 5:     Stick this file somewhere and 'source cscope.vim' it from
""               your ~/.vimrc file (or cut and paste it into your .vimrc).
""
"" NOTE:
"" These key maps use multiple keystrokes (2 or 3 keys).  If you find that
"" vim
"" keeps timing you out before you can complete them, try changing your
"" timeout
"" settings, as explained below.
""
"" Happy cscoping,
""
"" Jason Duell       jduell@alumni.princeton.edu     2002/3/7
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"" This tests to see if vim was configured with the '--enable-cscope' option
"" " when it was compiled.  If it wasn't, time to recompile vim...
if has("cscope")
set cscopeprg=/home/cody/ws/smartos-live/projects/illumos/usr/src/tools/proto/root_i386-nd/opt/onbld/bin/i386/cscope-fast
"
"""""""""""""" Standard cscope/vim boilerplate
"
"" use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
set cscopetag
"
"" check cscope for definition of a symbol before checking ctags: set to 1
""          " if you want the reverse search order.
set csto=0

" If we're in a workspace, we usually want to be editing from the source root so
" that cscope paths are correct.
"if $SRC != ""
"    cd $SRC
"endif

if filereadable("cscope.out")
    cs add cscope.out
elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
endif

set cscopeverbose

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>

endif
